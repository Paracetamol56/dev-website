basePath: /api
definitions:
  controllers.ContactBody:
    properties:
      email:
        type: string
      message:
        maxLength: 1000
        minLength: 10
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      userId:
        type: string
    required:
    - email
    - message
    - name
    type: object
  controllers.GithubLoginBody:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  controllers.HealthResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
  controllers.LoginBody:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  controllers.PatchUserBody:
    properties:
      flavour:
        enum:
        - latte
        - frappe
        - macchiato
        - mocha
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      profilePicture:
        type: string
    type: object
  controllers.VerifyBody:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  models.FullUser:
    properties:
      createdAt:
        type: string
      email:
        type: string
      flavour:
        type: string
      github:
        $ref: '#/definitions/models.GitHubUser'
      githubAccessToken:
        type: string
      id:
        type: string
      lastLogin:
        type: string
      lastRefresh:
        type: string
      name:
        type: string
      profilePicture:
        type: string
    type: object
  models.GitHubUser:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      blog:
        type: string
      company:
        type: string
      created_at:
        type: string
      email:
        type: string
      events_url:
        type: string
      followers:
        type: integer
      followers_url:
        type: string
      following:
        type: integer
      following_url:
        type: string
      gists_url:
        type: string
      gravatar_id:
        type: string
      hireable:
        type: boolean
      html_url:
        type: string
      id:
        type: integer
      location:
        type: string
      login:
        type: string
      name:
        type: string
      node_id:
        type: string
      organizations_url:
        type: string
      public_gists:
        type: integer
      public_repos:
        type: integer
      received_events_url:
        type: string
      repos_url:
        type: string
      site_admin:
        type: boolean
      starred_url:
        type: string
      subscriptions_url:
        type: string
      twitter_username:
        type: string
      type:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.HipparcosHR:
    properties:
      Amag:
        type: number
      BV:
        type: number
      hip:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: matheo.galu56@gmail.com
    name: Matheo Galuba
    url: https://dev.matheo-galuba.com/contact
  description: This is the API for my personal dev website
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Dev Website API
  version: "1.0"
paths:
  /auth/github/login:
    post:
      consumes:
      - application/json
      description: Login or register a user with GitHub by code
      parameters:
      - description: Code
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.GithubLoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
      summary: Login or register a user with GitHub
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login or register a user by email
      parameters:
      - description: Email
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FullUser'
        "400":
          description: Bad Request
      summary: Login or register a user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh a user's access token by refresh token
      parameters:
      - description: Refresh token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.VerifyBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
      summary: Refresh a user's access token
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Verify a user's email by token
      parameters:
      - description: Token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.VerifyBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FullUser'
        "400":
          description: Bad Request
      summary: Verify a user's email
      tags:
      - auth
  /contact:
    post:
      consumes:
      - application/json
      description: Send a contact message
      parameters:
      - description: Contact message
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/controllers.ContactBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Send a contact message
      tags:
      - contact
  /health:
    get:
      description: Get health status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.HealthResponse'
      summary: Get health status
      tags:
      - health
  /hipparcos/hr:
    get:
      description: Get all Hipparcos HR stars
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.HipparcosHR'
            type: array
      summary: Get all Hipparcos HR stars
      tags:
      - hipparcos
  /hipparcos/hr/{hip}:
    get:
      description: Get one Hipparcos HR star by HIP number
      parameters:
      - description: HIP number
        in: path
        name: hip
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.HipparcosHR'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      summary: Get one Hipparcos HR star
      tags:
      - hipparcos
  /user/{id}:
    delete:
      description: Delete a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - Bearer: []
      summary: Delete a user
      tags:
      - user
    get:
      description: Get one user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FullUser'
        "400":
          description: Bad Request
        "404":
          description: Not Found
      security:
      - Bearer: []
      summary: Get one user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update a user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: patchUser
        required: true
        schema:
          $ref: '#/definitions/controllers.PatchUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FullUser'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - Bearer: []
      summary: Update a user
      tags:
      - user
  /user/{id}/export:
    get:
      description: Get user export by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FullUser'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
      security:
      - Bearer: []
      summary: Get user export
      tags:
      - user
securityDefinitions:
  Bearer:
    description: Bearer token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
